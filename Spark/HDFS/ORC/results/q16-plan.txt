
== Parsed Logical Plan ==
'Sort ['supplier_count DESC NULLS LAST, 'p_brand ASC NULLS FIRST, 'p_type ASC NULLS FIRST, 'p_size ASC NULLS FIRST], true
+- AnalysisBarrier
      +- Aggregate [p_brand#15, p_type#16, p_size#17], [p_brand#15, p_type#16, p_size#17, count(distinct ps_suppkey#33) AS supplier_count#385L]
         +- Join Inner, (ps_partkey#32 = p_partkey#12)
            :- Project [ps_partkey#32, ps_suppkey#33]
            :  +- Join Inner, (s_suppkey#44 = ps_suppkey#33)
            :     :- Filter NOT UDF(s_comment#50)
            :     :  +- Relation[s_suppkey#44,s_name#45,s_address#46,s_nationkey#47,s_phone#48,s_acctbal#49,s_comment#50,s_dummy#51] orc
            :     +- Relation[ps_partkey#32,ps_suppkey#33,ps_availqty#34,ps_supplycost#35,ps_comment#36,ps_dummy#37] orc
            +- Project [p_partkey#12, p_brand#15, p_type#16, p_size#17]
               +- Filter ((NOT (p_brand#15 = Brand#45) && NOT UDF(p_type#16)) && if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else UDF(p_size#17))
                  +- Relation[p_partkey#12,p_name#13,p_mfgr#14,p_brand#15,p_type#16,p_size#17,p_container#18,p_retailprice#19,p_comment#20,p_dummy#21] orc

== Analyzed Logical Plan ==
p_brand: string, p_type: string, p_size: int, supplier_count: bigint
Sort [supplier_count#385L DESC NULLS LAST, p_brand#15 ASC NULLS FIRST, p_type#16 ASC NULLS FIRST, p_size#17 ASC NULLS FIRST], true
+- Aggregate [p_brand#15, p_type#16, p_size#17], [p_brand#15, p_type#16, p_size#17, count(distinct ps_suppkey#33) AS supplier_count#385L]
   +- Join Inner, (ps_partkey#32 = p_partkey#12)
      :- Project [ps_partkey#32, ps_suppkey#33]
      :  +- Join Inner, (s_suppkey#44 = ps_suppkey#33)
      :     :- Filter NOT UDF(s_comment#50)
      :     :  +- Relation[s_suppkey#44,s_name#45,s_address#46,s_nationkey#47,s_phone#48,s_acctbal#49,s_comment#50,s_dummy#51] orc
      :     +- Relation[ps_partkey#32,ps_suppkey#33,ps_availqty#34,ps_supplycost#35,ps_comment#36,ps_dummy#37] orc
      +- Project [p_partkey#12, p_brand#15, p_type#16, p_size#17]
         +- Filter ((NOT (p_brand#15 = Brand#45) && NOT UDF(p_type#16)) && if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else UDF(p_size#17))
            +- Relation[p_partkey#12,p_name#13,p_mfgr#14,p_brand#15,p_type#16,p_size#17,p_container#18,p_retailprice#19,p_comment#20,p_dummy#21] orc

== Optimized Logical Plan ==
Sort [supplier_count#385L DESC NULLS LAST, p_brand#15 ASC NULLS FIRST, p_type#16 ASC NULLS FIRST, p_size#17 ASC NULLS FIRST], true
+- Aggregate [p_brand#15, p_type#16, p_size#17], [p_brand#15, p_type#16, p_size#17, count(distinct ps_suppkey#33) AS supplier_count#385L]
   +- Project [ps_suppkey#33, p_brand#15, p_type#16, p_size#17]
      +- Join Inner, (ps_partkey#32 = p_partkey#12)
         :- Project [ps_partkey#32, ps_suppkey#33]
         :  +- Join Inner, (s_suppkey#44 = ps_suppkey#33)
         :     :- Project [s_suppkey#44]
         :     :  +- Filter (NOT UDF(s_comment#50) && isnotnull(s_suppkey#44))
         :     :     +- Relation[s_suppkey#44,s_name#45,s_address#46,s_nationkey#47,s_phone#48,s_acctbal#49,s_comment#50,s_dummy#51] orc
         :     +- Project [ps_partkey#32, ps_suppkey#33]
         :        +- Filter (isnotnull(ps_suppkey#33) && isnotnull(ps_partkey#32))
         :           +- Relation[ps_partkey#32,ps_suppkey#33,ps_availqty#34,ps_supplycost#35,ps_comment#36,ps_dummy#37] orc
         +- Project [p_partkey#12, p_brand#15, p_type#16, p_size#17]
            +- Filter ((((isnotnull(p_brand#15) && NOT (p_brand#15 = Brand#45)) && NOT UDF(p_type#16)) && if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else UDF(p_size#17)) && isnotnull(p_partkey#12))
               +- Relation[p_partkey#12,p_name#13,p_mfgr#14,p_brand#15,p_type#16,p_size#17,p_container#18,p_retailprice#19,p_comment#20,p_dummy#21] orc

== Physical Plan ==
*(9) Sort [supplier_count#385L DESC NULLS LAST, p_brand#15 ASC NULLS FIRST, p_type#16 ASC NULLS FIRST, p_size#17 ASC NULLS FIRST], true, 0
+- Exchange rangepartitioning(supplier_count#385L DESC NULLS LAST, p_brand#15 ASC NULLS FIRST, p_type#16 ASC NULLS FIRST, p_size#17 ASC NULLS FIRST, 200)
   +- *(8) HashAggregate(keys=[p_brand#15, p_type#16, p_size#17], functions=[count(distinct ps_suppkey#33)], output=[p_brand#15, p_type#16, p_size#17, supplier_count#385L])
      +- Exchange hashpartitioning(p_brand#15, p_type#16, p_size#17, 200)
         +- *(7) HashAggregate(keys=[p_brand#15, p_type#16, p_size#17], functions=[partial_count(distinct ps_suppkey#33)], output=[p_brand#15, p_type#16, p_size#17, count#406L])
            +- *(7) HashAggregate(keys=[p_brand#15, p_type#16, p_size#17, ps_suppkey#33], functions=[], output=[p_brand#15, p_type#16, p_size#17, ps_suppkey#33])
               +- Exchange hashpartitioning(p_brand#15, p_type#16, p_size#17, ps_suppkey#33, 200)
                  +- *(6) HashAggregate(keys=[p_brand#15, p_type#16, p_size#17, ps_suppkey#33], functions=[], output=[p_brand#15, p_type#16, p_size#17, ps_suppkey#33])
                     +- *(6) Project [ps_suppkey#33, p_brand#15, p_type#16, p_size#17]
                        +- *(6) SortMergeJoin [ps_partkey#32], [p_partkey#12], Inner
                           :- *(3) Sort [ps_partkey#32 ASC NULLS FIRST], false, 0
                           :  +- Exchange hashpartitioning(ps_partkey#32, 200)
                           :     +- *(2) Project [ps_partkey#32, ps_suppkey#33]
                           :        +- *(2) BroadcastHashJoin [s_suppkey#44], [ps_suppkey#33], Inner, BuildLeft
                           :           :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                           :           :  +- *(1) Project [s_suppkey#44]
                           :           :     +- *(1) Filter (NOT UDF(s_comment#50) && isnotnull(s_suppkey#44))
                           :           :        +- *(1) FileScan orc [s_suppkey#44,s_comment#50] Batched: true, Format: ORC, Location: InMemoryFileIndex[hdfs://namenode:8020/supplier.orc], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey)], ReadSchema: struct<s_suppkey:int,s_comment:string>
                           :           +- *(2) Project [ps_partkey#32, ps_suppkey#33]
                           :              +- *(2) Filter (isnotnull(ps_suppkey#33) && isnotnull(ps_partkey#32))
                           :                 +- *(2) FileScan orc [ps_partkey#32,ps_suppkey#33] Batched: true, Format: ORC, Location: InMemoryFileIndex[hdfs://namenode:8020/partsupp.orc], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:int,ps_suppkey:int>
                           +- *(5) Sort [p_partkey#12 ASC NULLS FIRST], false, 0
                              +- Exchange hashpartitioning(p_partkey#12, 200)
                                 +- *(4) Project [p_partkey#12, p_brand#15, p_type#16, p_size#17]
                                    +- *(4) Filter ((((isnotnull(p_brand#15) && NOT (p_brand#15 = Brand#45)) && NOT UDF(p_type#16)) && if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else if (isnull(p_size#17)) null else UDF(p_size#17)) && isnotnull(p_partkey#12))
                                       +- *(4) FileScan orc [p_partkey#12,p_brand#15,p_type#16,p_size#17] Batched: true, Format: ORC, Location: InMemoryFileIndex[hdfs://namenode:8020/part.orc], PartitionFilters: [], PushedFilters: [IsNotNull(p_brand), Not(EqualTo(p_brand,Brand#45)), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:int,p_brand:string,p_type:string,p_size:int>
