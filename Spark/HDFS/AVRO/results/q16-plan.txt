
== Physical Plan ==
*(11) Sort [supplier_count#85582L DESC NULLS LAST, p_brand#3 ASC NULLS FIRST, p_type#4 ASC NULLS FIRST, p_size#5 ASC NULLS FIRST], true, 0
+- Exchange rangepartitioning(supplier_count#85582L DESC NULLS LAST, p_brand#3 ASC NULLS FIRST, p_type#4 ASC NULLS FIRST, p_size#5 ASC NULLS FIRST, 200)
   +- *(10) HashAggregate(keys=[p_brand#3, p_type#4, p_size#5], functions=[count(distinct ps_suppkey#21)])
      +- Exchange hashpartitioning(p_brand#3, p_type#4, p_size#5, 200)
         +- *(9) HashAggregate(keys=[p_brand#3, p_type#4, p_size#5], functions=[partial_count(distinct ps_suppkey#21)])
            +- *(9) HashAggregate(keys=[p_brand#3, p_type#4, p_size#5, ps_suppkey#21], functions=[])
               +- Exchange hashpartitioning(p_brand#3, p_type#4, p_size#5, ps_suppkey#21, 200)
                  +- *(8) HashAggregate(keys=[p_brand#3, p_type#4, p_size#5, ps_suppkey#21], functions=[])
                     +- *(8) Project [ps_suppkey#21, p_brand#3, p_type#4, p_size#5]
                        +- *(8) SortMergeJoin [ps_partkey#20], [p_partkey#0], Inner
                           :- *(4) Sort [ps_partkey#20 ASC NULLS FIRST], false, 0
                           :  +- Exchange hashpartitioning(ps_partkey#20, 200)
                           :     +- *(3) Project [ps_partkey#20, ps_suppkey#21]
                           :        +- *(3) BroadcastHashJoin [s_suppkey#32], [ps_suppkey#21], Inner, BuildLeft
                           :           :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                           :           :  +- *(2) Project [s_suppkey#32]
                           :           :     +- *(2) Project [s_suppkey#32, s_comment#38]
                           :           :        +- *(2) Filter NOT pythonUDF0#86677
                           :           :           +- BatchEvalPython [<lambda>(s_comment#38)], [s_suppkey#32, s_comment#38, pythonUDF0#86677]
                           :           :              +- *(1) Filter isnotnull(s_suppkey#32)
                           :           :                 +- *(1) FileScan avro [s_suppkey#32,s_comment#38] Batched: false, Format: com.databricks.spark.avro.DefaultSource@6e05add3, Location: InMemoryFileIndex[hdfs://namenode:8020/supplier.avro], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey)], ReadSchema: struct<s_suppkey:int,s_comment:string>
                           :           +- *(3) Project [ps_partkey#20, ps_suppkey#21]
                           :              +- *(3) Filter (isnotnull(ps_suppkey#21) && isnotnull(ps_partkey#20))
                           :                 +- *(3) FileScan avro [ps_partkey#20,ps_suppkey#21] Batched: false, Format: com.databricks.spark.avro.DefaultSource@a15fd8b, Location: InMemoryFileIndex[hdfs://namenode:8020/partsupp.avro], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:int,ps_suppkey:int>
                           +- *(7) Sort [p_partkey#0 ASC NULLS FIRST], false, 0
                              +- Exchange hashpartitioning(p_partkey#0, 200)
                                 +- *(6) Project [p_partkey#0, p_brand#3, p_type#4, p_size#5]
                                    +- *(6) Project [p_partkey#0, p_brand#3, p_type#4, p_size#5]
                                       +- *(6) Filter (NOT pythonUDF0#86678 && pythonUDF1#86679)
                                          +- BatchEvalPython [<lambda>(p_type#4), <lambda>(p_size#5)], [p_partkey#0, p_brand#3, p_type#4, p_size#5, pythonUDF0#86678, pythonUDF1#86679]
                                             +- *(5) Filter ((isnotnull(p_brand#3) && NOT (p_brand#3 = Brand#45)) && isnotnull(p_partkey#0))
                                                +- *(5) FileScan avro [p_partkey#0,p_brand#3,p_type#4,p_size#5] Batched: false, Format: com.databricks.spark.avro.DefaultSource@754c2a03, Location: InMemoryFileIndex[hdfs://namenode:8020/part.avro], PartitionFilters: [], PushedFilters: [IsNotNull(p_brand), Not(EqualTo(p_brand,Brand#45)), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:int,p_brand:string,p_type:string,p_size:int>
