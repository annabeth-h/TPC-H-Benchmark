
== Physical Plan ==
*(21) Sort [n_name#49 ASC NULLS FIRST, o_year#669 DESC NULLS LAST], true, 0
+- Exchange rangepartitioning(n_name#49 ASC NULLS FIRST, o_year#669 DESC NULLS LAST, 200)
   +- *(20) HashAggregate(keys=[n_name#49, o_year#669], functions=[sum(cast(amount#670 as bigint))])
      +- Exchange hashpartitioning(n_name#49, o_year#669, 200)
         +- *(19) HashAggregate(keys=[n_name#49, o_year#669], functions=[partial_sum(cast(amount#670 as bigint))])
            +- *(19) Project [n_name#49, pythonUDF0#17369 AS o_year#669, pythonUDF1#17370 AS amount#670]
               +- BatchEvalPython [<lambda>(o_orderdates#94), <lambda>(l_extendedprice#61, l_discount#62, ps_supplycost#23, l_quantity#60)], [l_discount#62, l_extendedprice#61, l_quantity#60, n_name#49, o_orderdates#94, ps_supplycost#23, pythonUDF0#17369, pythonUDF1#17370]
                  +- *(18) Project [l_discount#62, l_extendedprice#61, l_quantity#60, n_name#49, o_orderdates#94, ps_supplycost#23]
                     +- *(18) SortMergeJoin [l_orderkey#56], [o_orderkey#90], Inner
                        :- *(15) Sort [l_orderkey#56 ASC NULLS FIRST], false, 0
                        :  +- Exchange hashpartitioning(l_orderkey#56, 200)
                        :     +- *(14) Project [l_orderkey#56, l_quantity#60, l_extendedprice#61, l_discount#62, n_name#49, ps_supplycost#23]
                        :        +- *(14) SortMergeJoin [l_suppkey#58, l_partkey#57], [ps_suppkey#21, ps_partkey#20], Inner
                        :           :- *(11) Sort [l_suppkey#58 ASC NULLS FIRST, l_partkey#57 ASC NULLS FIRST], false, 0
                        :           :  +- Exchange hashpartitioning(l_suppkey#58, l_partkey#57, 200)
                        :           :     +- *(10) Project [l_orderkey#56, l_partkey#57, l_suppkey#58, l_quantity#60, l_extendedprice#61, l_discount#62, n_name#49]
                        :           :        +- *(10) SortMergeJoin [l_suppkey#58], [s_suppkey#32], Inner
                        :           :           :- *(6) Sort [l_suppkey#58 ASC NULLS FIRST], false, 0
                        :           :           :  +- Exchange hashpartitioning(l_suppkey#58, 200)
                        :           :           :     +- *(5) Project [l_orderkey#56, l_partkey#57, l_suppkey#58, l_quantity#60, l_extendedprice#61, l_discount#62]
                        :           :           :        +- *(5) SortMergeJoin [p_partkey#0], [l_partkey#57], Inner
                        :           :           :           :- *(2) Sort [p_partkey#0 ASC NULLS FIRST], false, 0
                        :           :           :           :  +- Exchange hashpartitioning(p_partkey#0, 200)
                        :           :           :           :     +- *(1) Project [p_partkey#0]
                        :           :           :           :        +- *(1) Filter ((isnotnull(p_name#1) && Contains(p_name#1, yellow)) && isnotnull(p_partkey#0))
                        :           :           :           :           +- *(1) FileScan avro [p_partkey#0,p_name#1] Batched: false, Format: com.databricks.spark.avro.DefaultSource@754c2a03, Location: InMemoryFileIndex[hdfs://namenode:8020/part.avro], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringContains(p_name,yellow), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:int,p_name:string>
                        :           :           :           +- *(4) Sort [l_partkey#57 ASC NULLS FIRST], false, 0
                        :           :           :              +- Exchange hashpartitioning(l_partkey#57, 200)
                        :           :           :                 +- *(3) Project [l_orderkey#56, l_partkey#57, l_suppkey#58, l_quantity#60, l_extendedprice#61, l_discount#62]
                        :           :           :                    +- *(3) Filter ((isnotnull(l_partkey#57) && isnotnull(l_suppkey#58)) && isnotnull(l_orderkey#56))
                        :           :           :                       +- *(3) FileScan avro [l_orderkey#56,l_partkey#57,l_suppkey#58,l_quantity#60,l_extendedprice#61,l_discount#62] Batched: false, Format: com.databricks.spark.avro.DefaultSource@7bfb5a4, Location: InMemoryFileIndex[hdfs://namenode:8020/lineitem.avro], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:int,l_partkey:int,l_suppkey:int,l_quantity:double,l_extendedprice:double,l_disc...
                        :           :           +- *(9) Sort [s_suppkey#32 ASC NULLS FIRST], false, 0
                        :           :              +- Exchange hashpartitioning(s_suppkey#32, 200)
                        :           :                 +- *(8) Project [n_name#49, s_suppkey#32]
                        :           :                    +- *(8) BroadcastHashJoin [n_nationkey#48], [s_nationkey#35], Inner, BuildLeft
                        :           :                       :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)))
                        :           :                       :  +- *(7) Project [n_nationkey#48, n_name#49]
                        :           :                       :     +- *(7) Filter isnotnull(n_nationkey#48)
                        :           :                       :        +- *(7) FileScan avro [n_nationkey#48,n_name#49] Batched: false, Format: com.databricks.spark.avro.DefaultSource@555a0083, Location: InMemoryFileIndex[hdfs://namenode:8020/nation.avro], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:int,n_name:string>
                        :           :                       +- *(8) Project [s_suppkey#32, s_nationkey#35]
                        :           :                          +- *(8) Filter (isnotnull(s_nationkey#35) && isnotnull(s_suppkey#32))
                        :           :                             +- *(8) FileScan avro [s_suppkey#32,s_nationkey#35] Batched: false, Format: com.databricks.spark.avro.DefaultSource@6e05add3, Location: InMemoryFileIndex[hdfs://namenode:8020/supplier.avro], PartitionFilters: [], PushedFilters: [IsNotNull(s_nationkey), IsNotNull(s_suppkey)], ReadSchema: struct<s_suppkey:int,s_nationkey:int>
                        :           +- *(13) Sort [ps_suppkey#21 ASC NULLS FIRST, ps_partkey#20 ASC NULLS FIRST], false, 0
                        :              +- Exchange hashpartitioning(ps_suppkey#21, ps_partkey#20, 200)
                        :                 +- *(12) Project [ps_partkey#20, ps_suppkey#21, ps_supplycost#23]
                        :                    +- *(12) Filter (isnotnull(ps_suppkey#21) && isnotnull(ps_partkey#20))
                        :                       +- *(12) FileScan avro [ps_partkey#20,ps_suppkey#21,ps_supplycost#23] Batched: false, Format: com.databricks.spark.avro.DefaultSource@a15fd8b, Location: InMemoryFileIndex[hdfs://namenode:8020/partsupp.avro], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:int,ps_suppkey:int,ps_supplycost:double>
                        +- *(17) Sort [o_orderkey#90 ASC NULLS FIRST], false, 0
                           +- Exchange hashpartitioning(o_orderkey#90, 200)
                              +- *(16) Project [o_orderkey#90, o_orderdates#94]
                                 +- *(16) Filter isnotnull(o_orderkey#90)
                                    +- *(16) FileScan avro [o_orderkey#90,o_orderdates#94] Batched: false, Format: com.databricks.spark.avro.DefaultSource@6fb4750c, Location: InMemoryFileIndex[hdfs://namenode:8020/orders.avro], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:int,o_orderdates:string>
